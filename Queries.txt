1. User opens GUI to view spots in the parking lot. We return to them a table that lists all vacant spots in the parking lot.

SELECT SpotNumber, Level
FROM ParkingSpot
	JOIN ParkingLot ON (ParkingLot.ID = ParkingSpot.ParkingLotID)
WHERE ParkingLot.Name = lotName AND LicensePlate IS null
ORDERY BY SpotNumber, Level;

2. User wants to filter available spots based on the parking spot type.
   Through our filter, returns them a table that lists all the vacant spots of that type.

SELECT SpotNumber, Level, ParkingSpotType.Type
FROM ParkingSpot
	JOIN ParkingSpotType ON (ParkingSpotType.ID = ParkingSpot.ParkingSpotTypeID)
WHERE ParkingSpotType.Type = typeName AND LicensePlate IS null
ORDER BY SpotNumber, Level;

3. User enters in license plate, color, manufacturer, model, and type into GUI.
   We record and update the database accordingly. Returns if the data inputted is successful. 

INSERT INTO Vehicle
VALUES (plateNumber, color, manu, model, typeNum);

4. User parks their car in a vacant spot.
   Sensors record and update the database (simulated by manually entering data for the purpose of this project).

UPDATE ParkingSpot
SET ParkingSpot.LicensePlate = plateNumber
WHERE ParkingSpot.SpotNumber = spotNumber AND ParkingLot.Name = lotName;

INSERT INTO Payment
VALUES ('', plateNumber, 0, dateTime('now'), False);

5. User leaves their parking spot.
   Sensors record and update the database (simulated by manually entering data for the purpose of this project)

UPADTE ParkingSpot
SET PakingSpot.LicensePlate = null
WHERE ParkingSpot.SpotNumber = spotNumber AND ParkingLot.Name = lotName;

-- Updates duration in payment (syntax might be slightly off), NEEDS TO BE CREATED WITH TABLES (before interactions)
CREATE TRIGGER ParkingSpotPayment AFTER
	UPDATE ON ParkingSpot FOR EACH ROW
	BEGIN
		IF (ParkingSpot.LiscensePlate = null) THEN
		UPDATE Payment
		SET duration = DATE_SUB(startTime, INTERVAL dateTime('now') MINUTE)
		WHERE ParkingSpot.SpotNumber = spotNumber AND ParkingLot.Name = lotName;
	END;

6. User wants to view unpaid payments by entering their license plate into the GUI.
   We return to them a table that lists all of the different payments registered to their license plate.
   (The payment itself is not covered under our project)

SELECT StartTime, Duration, Status
FROM Payment
WHERE LicensePlate = plateNumber
ORDER BY startTime;

7. User (the university) wants to find all payments that have not been paid seven or more days after the parking start time. 
   We return to them a table that lists all the payments that fall into this criteria.

SELECT LicensePlate, Duration, StartTime, Status
FROM Payment
WHERE (DATE_ADD(startTime, INTERVAL 7 DAY)) < datetime('now')
ORDER BY startTime;


8. User (the university) wants to find the current percentage of spots filled in each parking lot.

SELECT Total.ParkingLotName, ((1.0 * Vacant.Vacancy) / (1.0 * Total.TotalSpots)) * 100 AS Percentage
FROM (
	SELECT COUNT(*) as TotalSpots, ParkingLot.name as ParkingLotName
	FROM ParkingSpot
		JOIN ParkingLot ON (ParkingLot.ID = ParkingSpot.ParkingLotID)
	GROUP BY ParkingLot.name
	) AS Total
	JOIN (
	SELECT COUNT(*) as Vacancy,ParkingLot.name as ParkingLotName
	FROM ParkingSpot
		JOIN ParkingLot ON (ParkingLot.ID = ParkingSpot.ParkingLotID)
	WHERE LicensePlate IS null
	GROUP BY ParkingLot.name
	) AS Vacant
WHERE Total.ParkingLotName = Vacant.ParkingLotName
ORDER BY Total.ParkingLotName;


9. User (the university) wants to find the current percentage of spots filled for each parking spot type.

SELECT Total.TypeName, ((1.0 * Vacant.Vacancy) / (1.0 * Total.TotalSpots)) * 100 AS Percentage
FROM (
	SELECT COUNT(*) as TotalSpots, ParkingSpotType.Type as TypeName
	FROM ParkingSpot
		JOIN ParkingSpotType ON (ParkingSpot.ParkingSpotTypeID = ParkingSpotType.ID)
	GROUP BY ParkingSpotType.ID
	) AS Total
	JOIN (
	SELECT COUNT(*) as Vacancy, ParkingSpotType.Type as TypeName
	FROM ParkingSpot
		JOIN ParkingSpotType ON (ParkingSpot.ParkingSpotTypeID = ParkingSpotType.ID)
	WHERE LicensePlate IS null
	GROUP BY ParkingSpotType.ID
	) AS Vacant
WHERE Total.TypeName = Vacant.TypeName
ORDER BY Total.TypeName;

test
